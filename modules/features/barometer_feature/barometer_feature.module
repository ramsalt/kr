<?php

include_once('barometer_feature.features.inc');

function barometer_feature_nodeapi (&$node, $op, $a3 = NULL, $a4 = NULL) {
	switch ($op) {
		case 'view';
			if($node->type == 'barometer') {

				$node->content['barometer_output'] = array(
					'#value' => barometer_feature_generate_content($node), 
					'#weight' => 10,
				);	
				break;
			}
	}
}

/**
 * Implementation of hook_theme().
 */
function barometer_feature_theme($existing, $type, $theme, $path) {
  return array(
    'barometer_chart' => array(
      'arguments' => array('filtered_data' => NULL, 'data' => NULL),
    ),
    'barometer_table' => array(
      'arguments' => array('filtered_data' => NULL, 'data' => NULL),
    ),
  );
}

function barometer_feature_generate_content ($node) {
	_barometer_feature_init_externals ();
	
	$values = barometer_feature_get_saved_values();
	
	if(isset($_GET['remove_mkey'])) {
		barometer_feature_remove_saved_value('main_keys', $_GET['remove_mkey']);
		unset($values['main_keys'][$_GET['remove_mkey']]);
	}
	
	foreach ($node->field_barometer_data as $key=>$file) {
		$data[$key] = _barometer_feature_parse_data($file['filepath']);
		$data[$key]['#heading'] = $file['data']['description'];
	}

	$output = '';

	$filtered_data = _barometer_feature_filter_data($data, $values);
	$filtered_data['#table']['#description'] = $node->field_table_description[0]['value'];

	$output .= drupal_get_form('barometer_feature_key_form', $data, $values, $node);
	
	if(!is_array($values['main_keys'])) {
		$output .= 'Velg først en kommune og hvilke nøkkeltall du ønsker å se. Deretter kan du legge til flere kommuner, slik at du kan sammenlikne disse med hverandre.';
	} else {
		$output .= theme('barometer_chart', $filtered_data, $data);
		$output .= theme('barometer_table', $filtered_data, $data);
	}

	return $output;
}

function _barometer_feature_render_content ($node) {

}

function theme_barometer_chart ($filtered_data, $data) {
	$chart_data = array(
		'#plugin'    => 'jqplot', // Google Charts API will be used
		'#type'     => 'vbar2D', // To show a simple 2D line chart
	  '#color'    => '336699', // background color, in RRGGBB format
	  '#width'		=> 580,
	);
	
	$header = $filtered_data['#header'];
	
	$set_id = 0;
	
	$row_count = count($filtered_data[$set_id]);
	$key_count = count(current($filtered_data[$set_id]));
	
	$height = $row_count*$key_count*25 < $key_count*100 ? $key_count*100 : $row_count*$key_count*25;
	$chart_data['#height'] = $height;
	
	//foreach(element_children($filtered_data) as $set_id) {
		$set_data = array();
		foreach(element_children($filtered_data[$set_id]) as $row_key) {
			$row = $filtered_data[$set_id][$row_key];
			$row_data = array();
			foreach($row as $k => $v) {
				$row_data[] = array('#key'=>(int)$v[1], '#value'=>$data[$set_id][0][$k]);
				_barometer_feature_set_max_value($v[1]);
			}
			$row_data['#legend'] = $data[$set_id][$row_key][1];
			$chart_data[] = $row_data;
		}
	//}
	$chart_data['#settings']['title']['text'] = 'Rangering '.$filtered_data[$set_id]['#heading'];

	$chart_data['#settings']['grid']['background'] = '#fff';
	$chart_data['#settings']['grid']['shadow'] = false;
	$chart_data['#settings']['grid']['borderWidth'] = 1;
	$chart_data['#settings']['grid']['borderColor'] = '#000';
	
	$chart_data['#settings']['axes']['xaxis']['min'] = 0;
	$chart_data['#settings']['axes']['xaxis']['max'] = _barometer_feature_get_max_value()+10;
	$chart_data['#settings']['axes']['xaxis']['tickOptions'] = array('showGridline'=>false, 'showLabel'=>false, 'showMark'=>false);
	
	$chart_data['#settings']['axes']['yaxis']['tickOptions'] = array('showGridline'=>true, 'textColor'=>'#000', 'fontSize'=>'8pt', 'markSize'=>10);
	$chart_data['#settings']['axes']['xaxis']['numberTicks'] = _barometer_feature_get_max_value()/22;
	

	$chart_data['#settings']['seriesDefaults']['pointLabels'] = array('show' => false);
	$chart_data['#settings']['seriesDefaults']['shadowAngle'] = 135;
	$chart_data['#settings']['seriesDefaults']['shadow'] = false;
	
	$chart_data['#settings']['seriesDefaults']['rendererOptions']['barWidth'] = 10;

	$chart_data['#settings']['legend']['show'] = true;
	$chart_data['#settings']['legend']['location'] = 'ne';
	$chart_data['#settings']['legend']['rowSpacing'] = '15px';
	$chart_data['#settings']['legend']['textColor'] = '#000';
	$chart_data['#settings']['legend']['placement'] = 'outsideGrid';

	return charts_chart($chart_data);
	
	return '';
}

function theme_barometer_table ($filtered_data, $data) {
	$table_data = array();
	$table_data[0][0] = '';
	$set_data = array();
	$first_set = current($filtered_data);
	$first_row = current($first_set);
	
	foreach(element_children($first_row) as $key_id) {
		$table_data[$key_id][] = array('data'=>$filtered_data['#header'][$key_id], 'header'=>true);
		$table_data[0] = array();
		$table_data[0][0] = '';
		$table_header = array(0=>'');
		foreach(element_children($first_set) as $row_id) {
			foreach(element_children($filtered_data) as $set_id) {
				$v = $filtered_data[$set_id][$row_id][$key_id];
				$table_data[$key_id][] = $v[0].' <span class="rangering">('.$v[1].')</span>';
				$table_data[0][] = array('data'=>$data[$set_id]['#heading'], 'header'=>true);
				if(!isset($table_header[$row_id])) {			
					$table_header[$row_id] = array('data'=>$data[$set_id][$row_id][1], 'colspan'=>count(element_children($filtered_data)));
				}
			}
		}
	}

	$output = theme('table', $table_header, $table_data, array('class'=>'barometer-table data-table'));
	$output .= '<div class="caption table-description">'.$filtered_data['#table']['#description'].'</div>';

	return $output;
}

function _barometer_feature_filter_data ($data, $values = array()) {
	//dsm($data);
	// Handle filtered values
	$header = $data[0][0];
	unset($data[0][0]);
	
	foreach($data as $set_key => $set) {
		foreach (element_children($data[$set_key]) as $row_key) {
			$row = $data[$set_key][$row_key];
		
			if(is_array($values['main_keys'])) {
				if(!in_array($data[$set_key][$row_key][0], $values['main_keys'])) { unset ($data[$set_key][$row_key]); continue;}
				
			}
			unset($data[$set_key][$row_key][0]);
			unset($data[$set_key][$row_key][1]);
			foreach($data[$set_key][$row_key] as $k=>$v) {
				$data[$set_key][$row_key][$k] = explode(':', $data[$set_key][$row_key][$k]);
			}
			if(isset($values['option_keys'])) {
				foreach($values['option_keys'] as $key => $value) {
					if($value == 0) {
						unset($data[$set_key][$row_key][$key]);
					}
				}
			}
		}
	}
	$data['#header'] = $header;
	//dsm($data);
	return $data;
}

function _barometer_feature_parse_data ($file) {
	include_once(libraries_get_path('parsecsv').'/parsecsv.lib.php');
	
	$csv = new parseCSV();
	$csv->heading = false;
	//$csv->convert_encoding = true;
	//$csv->input_encoding = 'ISO-8859-1';
	//$csv->output_encoding = 'utf8';
	$csv->delimiter = ';';
	$csv->parse($file);
	
	return $csv->data;
}

function barometer_feature_key_form ($form_state, $data, $values, $node) {
	$header = array_shift($data[0]); // Remove headers
	
	$main_keys_options = array();
	$main_keys_options[-1] = t('Choose @title', array('@title'=>$header[1]));
	
	foreach($data[0] as $row) {
		$main_keys_options[(int)$row[0]] = $row[1];
	}

	$form['main_keys'] = array (
		'#type' => 'select',
		'#options' => $main_keys_options,
		'#title' => 'Kommuner',
	);
	
	$selected_keys = array();
	if(isset($values['main_keys'])) {
		foreach ($values['main_keys'] as $key => $value) {
			$remove_link = l(t('Remove'), 'node/'.$node->nid, array('query'=>'remove_mkey='.$value, 'attributes'=>array('class'=>'remove-mkey-link')));
			$selected_keys[] = '<div class="selected-main-key" id="selected-key-'.$value.'">'.$main_keys_options[$value].$remove_link.'</div>';
		}
	}
		
	$form['selected_keys'] = array (
		'#type' => 'item',
		'#value' => '<div class="remove-mlinks clearfix">'.implode(' ', $selected_keys).'</div>',
	);
	
	$option_keys = array();
	for ($i = 2; $i < count($header); $i++) {
		$option_keys[$i] = $header[$i];
	}
	
	if (!isset($values['option_keys'])) $values['option_keys'] = array(); 
	ksort($values['option_keys']);
	
	$form['option_keys'] = array (
		'#type' => 'checkboxes',
		'#prefix' => '<div class="key-options clearfix">',
		'#suffix' => '</div>',
		'#options' => $option_keys,
		'#default_value' => $values['option_keys'],
		'#title' => 'Velg nøkler',
	);
	
	$form['submit'] = array('#type' => 'submit', '#value' => t('Update'));
	
	return $form;
}

function barometer_feature_key_form_submit ($form, &$form_state) {
	$values = barometer_feature_get_saved_values();
	
	$values['option_keys'] = $form_state['values']['option_keys'];
	
	if($form_state['values']['main_keys'] > 0) {
		$values['main_keys'][$form_state['values']['main_keys']] = $form_state['values']['main_keys'];
	}
	barometer_feature_save_values($values);
}

function barometer_feature_get_saved_values() {
	$values = array();
	if (isset($_COOKIE['barometer-data'])) {
		$values = unserialize($_COOKIE['barometer-data']);
	}
	return $values;
}

function barometer_feature_save_values($values) {
	setcookie('barometer-data', serialize($values));
}

function barometer_feature_remove_saved_value($key, $value) {
		$values = barometer_feature_get_saved_values();
		unset($values[$key][$value]);
		barometer_feature_save_values($values);
}

function _barometer_feature_get_max_value () {
	return ceil(_barometer_feature_set_max_value(0)/10)*10;
}

function _barometer_feature_set_max_value ($value) {
	static $max_value;

	if (!isset($max_value)) {
		$max_value = $value;
	} else {
		$max_value = $value > $max_value ? $value : $max_value;
	}
	
	return $max_value;
}

function _barometer_feature_init_externals () {
	$path = drupal_get_path('module', 'barometer_feature');
	drupal_add_css($path.'/barometer_feature.css');
}