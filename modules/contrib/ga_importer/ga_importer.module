<?php
// $Id: ga_importer.module,v 1.1.2.6 2011/01/27 01:36:02 dstol Exp $
/**
 * @file
 * This module connects to Google Analytics and filters the tracking
 * data for consumption by the node_counter table.
 */

/**
 * Implementation of hook_menu().
 *
 * @return
 *   $items, an array of the menu items
 */
function ga_importer_menu() {
  $items['admin/settings/ga-importer'] = array(
    'title' => 'Google Analytics Importer',
    'description' => 'The administrative settings for Google Analytics Importer.',
    'access callback' => 'user_access',
    'access arguments' => array('administer ga importer'),
    'page callback' => 'drupal_get_form',
    'page arguments' => array('ga_importer_form'),
    'type' => MENU_NORMAL_ITEM,
  );
  return $items;
}

/**
 * Implementation of hook_perm().
 */
function ga_importer_perm() {
  return array('administer ga importer');
}

/**
 * Implementation of hook_help().
 *
 * @todo
 *  write this hook
 */

/**
 * Administrative form
 *
 * @return
 *  $form, an array containing the FAPI data
 */
function ga_importer_form() {
  $form['ga_importer']['admin'] = array(
    '#type' => 'fieldset',
    '#title' => t('Google Analytics Importer settings'),
    '#collapsed' => FALSE,
    '#weight' => 0,
    '#description' => t('Here you can configure the basic settings of the Google Analytics Importer.'),
  );
  $form['ga_importer']['admin']['ga_importer_frequency'] = array(
    '#type' => 'radios',
    '#title' => t('Frequency of data update'),
    '#options' => array('on_cron' => t('Every cron run')),
    '#weight' => 1,
    '#description' => t('Set the frequency which the site checks Google Analytics to update the node_counter tables.'),
    '#default_value' => variable_get('ga_importer_frequency', 'on_cron')
  );
  $form['ga_importer']['admin']['ga_importer_proportion'] = array(
    '#type' => 'textfield',
    '#title' => t('Amount of nodes to update on each frequency event.'),
    '#default_value' => variable_get('ga_importer_proportion', '1%'),
    '#weight' => 2,
    '#description' => t('Enter the number of nodes to update or a percentage(as in 99%) of all nodes to update on each frequency event.'),
  );
  return system_settings_form($form);
}

/**
 * Administrative form validate
 *
 * @param
 *  $form, array
 *  $form_state, array passed by reference
 */
function ga_importer_form_validate($form, &$form_state) {
  // Ensure they select a real value/percent.
  if (!is_numeric($form_state['values']['ga_importer_proportion']) && preg_match('/(\d+)%/', $form_state['values']['ga_importer_proportion']) == 0) {
    form_set_error('ga_importer_proportion', t('Please enter only a number of nodes to process or a percentage to process'));
  }
}

/**
 * Implementation of hook_cron().
 */
function ga_importer_cron() {
  $hour = date('h') - 3;
  $min = date('m');

  // Set a counter to prevent us from making more than 10k requests.
  // This assumes cron is running more often than every 30 minutes.
  if ($hour < 1 && $min <= 30) {
    // We only want to import the data about a node once every day.
    $total_nodes = db_result(db_query("SELECT COUNT(1) FROM {node}"));
    if ($total_nodes < 10000) {
      variable_set('ga_importer_daily_limit', 10000 - $total_nodes);
    }
    else {
      variable_set('ga_importer_daily_limit', 0);
    }
  }

  // If permitted, do some updates.
  $daily_limit = variable_get('ga_importer_daily_limit', '0');
  if ($daily_limit < 10000) {
    if (variable_get('ga_importer_frequency', 'on_cron') == 'on_cron') {
      ga_importer_do_import('on_cron');
    }
  }
}

/**
 * Number of GA results to get based on if the admin settings.
 *
 * @bug
 *  http://code.google.com/apis/analytics/docs/gdata/gdataDeveloperGuide.html#quota
 *  Need to address this.
 *
 * @param
 *  $proportion, a numeric or percentage value of how many GA elements to
 *  process on each frequency event.
 * @return
 *  $max_results, the maximum pages to query GA for
 */
function ga_importer_process_proportion($proportion) {
  if (preg_match('/(\d+)%/', $proportion) > 0 ) {
    $inter = sscanf($proportion, "%d");
    $percent = ($inter[0] / 100);
    $total_nodes = db_result(db_query("SELECT COUNT(1) FROM {node}"));
    $max_results = (int) ($total_nodes * $percent);
  }
  else {
    $max_results = $proportion;
  }
  return (int) max($max_results, 1);
}

/**
 * Preprocesses the service call to work within the limits set.
 *
 * @param
 *  $op, a string value for setting different import process chains
 * @return
 *  $status, a boolean for status value
 */
function ga_importer_do_import($op, $dimensions = array('pagePath'), $metrics = array('pageViews', 'visits'), $sort_metric = NULL, $filter = NULL, $start_date = NULL, $end_date = NULL, $start_index = NULL, $max_results = NULL) {
  $proportion = variable_get('ga_importer_proportion', '1%');
  $start_index = variable_get('ga_importer_start_index', '0');
  $max_results = ga_importer_process_proportion($proportion);

  $attempts = $updates = 0;
  $nodes = db_query_range("SELECT nid FROM {node} ORDER BY nid ASC", $start_index, $max_results);

  session_save_session(FALSE);
  global $user;
  $temp_account = $user;
  $user = user_load(1);

  while ($node = db_fetch_object($nodes)) {
    $attempts++;
    $updates += ga_importer_get_data_for_node($node->nid);
  }

  $user = $temp_account;
  session_save_session(TRUE);

  // Update the start index.
  $new_start_index = $start_index + $attempts;
  if (ga_importer_validate_start_index($new_start_index, $max_results)) {
    variable_set('ga_importer_start_index', $new_start_index);
  }
  else {
    variable_set('ga_importer_start_index', '0');
  }

  watchdog('GA Importer', 'Updated node_counter table with %win successful updates and %fail failed updates', array('%win' => $updates, '%fail' => $attempts - $updates));

  return;
}

/**
 * Data from GA is stored in the custom table and node_counter table.
 *
 * @param integer $nid
 */
function ga_importer_get_data_for_node($nid) {
  // We only gather 7 days worth of data, so you have to make sure you process
  // enough nodes that data is gathered every 7 days. To be useful on most sites
  // you need to be more like once a day or every other day, but the 10,000
  // request limit and needing 2 requests per node means 7 days works for sites
  // with 35,000 nodes.
  $request = array(
    '#dimensions' => array('pagePath', 'date'),
    '#metrics' => array('pageviews', 'timeOnPage',  'bounces', 'visits'),
    '#start_date' => strtotime('-7 days'),
  );
  $rows = ga_importer_path_report($request, 'node/'. $nid);

  // If there's no data to record, report that we didn't update anything.
  if (!count($rows)) {
    return 0;
  }

  $aggregate = array('pageviews' => 0, 'daycount' => 0);
  // Save the data to our custom table.
  foreach ($rows as $day => $row) {
    // Make space for the data.
    db_query("DELETE FROM {ga_importer_data} WHERE entity_id = %d AND entity_type = '%s' AND event_date = %d", $nid, 'node', strtotime($day));

    foreach ($row as $metric => $value) {
      // Insert the data.
      db_query("INSERT INTO {ga_importer_data} (entity_id, entity_type, metric, event_date, value)
              values (%d, '%s', '%s', %d, %d)", $nid, 'node', $metric, strtotime($day), $value);

      // Store pageviews to insert in aggregate later.
      if ($metric == 'pageviews') {
        $aggregate['pageviews'] += $value;

        // The daycount is just the value for the most recent day available (yesterday), defaults to 0.
        if ($day == format_date(time() - 24*60*60, 'custom', 'Ymd')) {
          $aggregate['daycount'] = $value;
      }
    }
    }
  }

  // Save the data to node_counter.
  $node_counter = new stdClass();
  $node_counter->nid = $nid;
  $node_counter->totalcount = $aggregate['pageviews'];
  $node_counter->daycount = $aggregate['daycount'];
  $node_counter->timestamp = date('U');
  ga_importer_update_node_counter($node_counter);


  // 1 means we did something successfully.
  return 1;
}

/**
 * Get a report for a specific date.
 *
 * @param array $request
 * @param string $path
 * @param string $group_by
 *
 * @see google_analytics_reports_path_report()
 */
function ga_importer_path_report($request, $path, $group_by = 'date') {
  $data = array();
  foreach (google_analytics_api_path_filter($path) as $filter) {
    $request['#filter'] = $filter;
    $new_data = google_analytics_api_report_data($request);
    if ($new_data) {
      $data = array_merge($data, $new_data);
    }
  }

  // Add up all the statistics for different paths.
  $rows = array();
  foreach ($data as $item) {
    $dimensions = $item->getDimensions();
    if (is_array($group_by)) {
      $group_name = '';
      foreach ($group_by as $group_by_item) {
        $group_name .= $dimensions[$group_by_item];
      }
    }
    else {
      $group_name = $dimensions[$group_by];
    }
    if (isset($rows[$group_name])) {
      foreach ($item->getMetrics() as $key => $value) {
        $rows[$group_name][$key] += $value;
      }
    }
    else {
      $rows[$group_name] = $item->getMetrics();
    }
  }
  return $rows;
}

/**
 * A function to check if the start index should be reset.
 *
 * @param
 *   $new_start_index, int.
 *   $max_results, int
 * @return
 *   Boolean
 */
function ga_importer_validate_start_index($new_start_index, $max_results) {
  $max_node_count = db_result(db_query("SELECT COUNT(1) FROM {node}"));

  if ($new_start_index >= $max_node_count) {
    watchdog('GA Importer', 'Retrieved data for all nodes. Starting again with the first node.');
    return FALSE;
  }
  else {
    return TRUE;
  }
}

/**
 * Inserts or updates the table.
 *
 * @param
 *  $node_counter, a data object matching the node_counter table schema
 * @return
 *  Boolean status value
 */
function ga_importer_update_node_counter($node_counter) {
  if (ga_importer_node_exists($node_counter->nid)) {
    drupal_write_record('node_counter', $node_counter, 'nid');
  }
  else {
    drupal_write_record('node_counter', $node_counter);
  }
}

/**
 * A quick function to test if a node exists in the 'node_counter' table.
 *
 * @param
 *   $nid, an integer value for the node ID to be scanned for.
 * @return
 *   Boolean.
 */
function ga_importer_node_exists($nid) {
  $sql = "SELECT nid FROM {node_counter} WHERE nid='%s'";
  $result = db_result(db_query($sql, $nid));
  if (empty($result)) {
    return FALSE;
  }
  else {
    return TRUE;
  }
}


/**
 * Some day these functions should be merged into google_analytics_api.module.
 */

if (!function_exists('google_analytics_api_path_aliases')) {
  /*
   * Return a list of paths that are aliased with the given path (including the given path).
   */
  function google_analytics_api_path_aliases($node_path = NULL) {
    // Default path is the current path.
    if ($node_path == NULL) {
      $node_path = $_GET['q'];
    }
    // Get the normal node path if it is a node.
    $node_path = drupal_get_normal_path($node_path);

    // Grab all aliases.
    $aliases = array($node_path);
    $result = db_query("SELECT * FROM {url_alias} WHERE src = '%s'", $node_path);
    while ($row = db_fetch_array($result)) {
      $aliases[] = $row['dst'];
    }

    // If this is the front page, add the base path too, and index.php for good
    // measure.There may be other ways that the user is accessing the front
    // page but we can't account for them all.
    if ($node_path == drupal_get_normal_path(variable_get('site_frontpage', 'node'))) {
      $aliases[] = '';
      $aliases[] = 'index.php';
    }

    return $aliases;
  }
}

if (!function_exists('google_analytics_api_path_filter')) {
  /*
   * Construct a filter string that grabs pagePaths corresponding to the specified node or path.
   */
  function google_analytics_api_path_filter($node_path = NULL) {
    $aliases = google_analytics_api_path_aliases($node_path);

    // Okay, this is ridiculous.  Google Analytics regex filters
    // have a limit of 32 characters.  Therefore we can't simply
    // create one filter per pagePath.  Instead we are going too
    // do a "contains substring" match on the path, and then take
    // as many of the ending characters paired with ([?#].*)?$. If
    // this will all fit in one regex under 32 characters then so
    // be it.  Return a string if they all do, or an array if not.

    // 32 - 12 = 20 characters maximum for alias
    $under_filters = array();
    $over_filters = array();
    foreach ($aliases as $alias) {
      if (drupal_strlen($alias) <= 20) {
        $under_filters[] = 'pagePath =~ ^/' . $alias . '([?#].*)?$';
      }
      else {
        $over_filters[] = array(
          'pagePath =@ /' . $alias,
          // 32 - 10 = 22 characters
          'pagePath =~ ' . drupal_substr($alias, -22) . '([?#].*)?$'
        );
      }
    }

    // Add pipes and put together under and over filters.
    $filters = array();
    if ($under_filters) {
      $filters[] = implode(' || ', $under_filters);
    }
    foreach ($over_filters as $filter) {
      $filters[] = implode(' && ', $filter);
    }

    return $filters;
  }
}

